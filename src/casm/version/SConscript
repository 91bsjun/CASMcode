# http://www.scons.org/doc/production/HTML/scons-user.html
# This is: src/casm/version/SConscript

import subprocess

version_number = "0.2.X"

in_repo = True
# check if git installed
try:
  # pipe output to /dev/null for silence
  null = open("/dev/null", "w")
  subprocess.Popen("git", stdout=null, stderr=null)
  null.close()

except OSError:
  in_repo = False

if in_repo:
  # want to get the current git branch name, if in a git repository, else ''
  process = subprocess.Popen(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  
  # get the stdout, split if any '/', and use the last bit (the branch name), strip any extra space
  branch = process.communicate()[0].split('/')[-1].strip()

if branch == '':
  in_repo = False

Import('env')

# when compiling from an archive create "version.cc" file with release version number
if not in_repo:
  # write a 'release' version which just contains the branch name
  rel_cmd = 'sed -e "s|MY_VERSION|' + version_number + '|g" < version_template.cc > version.cc'
  cmd = 'cd src/casm/version && ' + rel_cmd
  version_cc = env.Command(['version.cc'], 'version_template.cc', cmd)
  
# when compiling from a git repo use the developement version number
else:
  
  # build a 'development' version which contains the branch name, short hash, and tag (if tagged)
  
  # get the short hash
  process = subprocess.Popen('git rev-parse --short HEAD'.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  commit = process.communicate()[0].strip()
  dev_version = commit
  
  # check if tracked files have changes, if so, add '+changes'
  process = subprocess.Popen('git status --porcelain --untracked-files=no'.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  changes = process.communicate()[0].strip()
  if changes != '':
    dev_version += "+changes"
  
  dev_cmd = 'sed -e "s|MY_VERSION|' + dev_version + '|g" < version_template.cc > version.cc'
  cmd = 'cd src/casm/version && ' + dev_cmd
  version_cc = env.Command(['version.cc'], 'version_template.cc', cmd)
  AlwaysBuild(version_cc)

  
version_obj = env.Object('version.cc')
Export('version_obj')
env['COMPILE_TARGETS'] = env['COMPILE_TARGETS'] + [version_obj]

