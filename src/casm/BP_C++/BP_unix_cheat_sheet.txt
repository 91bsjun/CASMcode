
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
///  Useful commands & programs

//////////////////////////////////////
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//////////////////////////////////////
// svn

// create a repository
svnadmin create /path/to/repository

// svnadmin create /svn/project_name


// add a new project
svn import project file:///repository_name/project -m "First Import" 

// from directory with project files:
// svn import . file:///svn/project_name -m "First import"

// check out a project
svn checkout file:///repository_name/project/trunk project 

// svn checkout file:///svn/project_name project_name


// get a list of projects
svn list --verbose file:///repository_name/project

// review changes
svn status

// add new files and directories
svn add file_or_dir

// delete files and directories (from repository and local)
svn delete file_or_dir

// delete files and directories (from the repository, but not locally)
//   (works for later versions of svn only)
svn delete --keep-local the_file

// commit changes
svn commit -m "saving changes: change1, change2, etc." 

// update file and directories
svn update

// export project without all the .svn background files:
svn export file:///repository_name/project project


//////////////////////////////////////
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//////////////////////////////////////
// bash

// make executable
#!/bin/bash

// script arguments are used via $1 $2 ...
bash script.sh file1 file2

#!/bin/bash
echo $1
echo $2

// pipes
// " | " is used to chain commands together
ls | grep CAR		// lists files containing "CAR" in name

//variables & lists
VAR=10
echo $VAR
VAR=$(ls | grep con*)

//expressions:
// see "man [" for possibilities
-a		and 
-o		or

-f		true if file exists and is a regular file
-d		true if file exists and is a directory
-s		true if file exists and has size greater than zero
-r		true if file exists and is readable
-w		true if file exists and is writeable
-x		true if file exists and is executable

=		true if strings are equal
!=		true if strings are not equal
<		true if string1 is less than string2 by ASCII value of charactes
>		true if string1 is greater than string2 by ASCII value of charactes
-eq		true if int1 is equal to int2
-ne		true if int1 is not equal to int2
-gt		true if int1 is greater than int2
-ge		true if int1 is greater than or equal to int2
-lt		true if int1 is less than int2
-le		true if int1 is less than or equal to int2


// arrays
array[0]="ele0"
array[1]="ele1"
array=("ele0" ele1)
// get element of array
echo ${array[0]}
//array length
echo ${#array[@]}	

// double parentheses (( ))
//   are used for arithmetic operations
//   within (( )) the dereference $a is ok but not necessary
a=5
((a++))
((a--))
echo $(( a + 9 - 10 ))
echo $(( b = a + 9 - 10 ))

for loops:

// inline
for i in $LIST; do ls $i; done

// multiline
for i in $LIST
do
	ls $i
done

// list
for i in {1..5}
do
	ls $i
done

// list with increment
for i in {1..10..2}		// {start..end..increment}
do
	ls $i
done

// expressions
for (( EXP1; EXP2; EXP3))	// (( c=1; c<=5; c++))
do
	ls $i
done

if statements:

// just if
if [ "foo" = "foo" ]
then
	echo "true"
fi

// if else
if [ "foo" = "foo" ]
then
	echo "true"
else
	echo "false"
fi

// if elif else
if [ "foo" = "foo" ]
then
	echo "first true"
elif [ "foo" = "foo"]
then
	echo "second true"
else
	echo "none true"
fi

//////////////////////////////////////
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//////////////////////////////////////
// find

examples:
// find directory_to_search -name filename

// find a files (or directories)
find . -name POSCAR

// find regular files 
find . -name POSCAR -type f

// find directories 
find . -name POSCAR -type d

// find and exec a command
find . -name POSCAR -exec ls -h -l {} \;

//////////////////////////////////////
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//////////////////////////////////////
// mail

// send an email
echo "test" | mail -s "Hello" foo@bar.com

//////////////////////////////////////
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//////////////////////////////////////
// vi

commands:
:x		exit, saving changes
:w		write
:wq		write and quit
:q!		exit, without saving changes
i		insert
esc		exit whatever mode you are in

0		move to beginning of line
$		move to end of line
nG		move to nth line of the file
G		move to last line of the file
H		move to top of screen
M		move to middle of screen
L		move to bottom of screen
%		move to associated (),{},[]
Ctrl-u	move up 1/2 page
Ctrl-d	move down 1/2 page
Ctrl-b	move up 1 page
Ctrl-f	move down 1 page

dd		delete current line
ndd		delete n lines
yy		copy line
p		paste

/string		search for string
?string		search backwards for string
n			go to next instance of string
N			go to previous instance of string
:qoh		stop highlighting

// search and replace
:%s/from/to/flags	search for 'from' and replace with 'to' according to flags
g					flag - global search and replace
c					flag - confirm replaces

// replace windows newline ^M
:%s/^M/\r/g			produce ^M using Ctrl V, Ctrl M

//////////////////////////////////////
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//////////////////////////////////////
// awk

standard variables:
NR:	Number of records (line number)
NF: Number of fields (column number)
$N: value of field N

options:
awk -F fs:	use 'fs' as the field seperator
awk -v var=val:		assign the value 'val' to the variable 'var'


examples:

// standard format
awk 'BEGIN{ ... }{ ... }END{...}' infile > outfile

// edit make_dirs
cp make_dirs make_dirs.orig
awk '{if(NR==1){print}else{print $1" 1 "$3}}' make_dirs.orig > make_dirs



//////////////////////////////////////
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//////////////////////////////////////
// sed

examples:

// standard format, replace first "from" found on each line
sed "s/from/to/" infile > outfile

// global replace, replace each "from" found on each line
sed "s/from/to/g" infile > outfile


// replace in same file, rep
sed -i "s/from/to/" infile

//////////////////////////////////////
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//////////////////////////////////////
// bc

examples:

// set scale (precision) to 20 with -l option
echo "1/3" | bc -l

// set scale to something else
echo "scale=5; 1/3" | bc

